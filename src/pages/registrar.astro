---
// Importamos Supabase en el server antes de que el HTML se envíe
import Layout from "../layouts/Layout.astro";
import { createClient } from "../lib/supabase";
import "../styles/global.css";

// Creamos el cliente Supabase en el server-side
const supabase = createClient({
  request: Astro.request,
  cookies: Astro.cookies,
});

// Obtenemos al usuario autenticado antes de que el HTML aparezca
const { data } = await supabase.auth.getUser();

if (data.user) {
  // Si el usuário ya tiene sesión, lo redirigimos directamente
  return Astro.redirect("/protected");
}
---

<Layout>
  <section
    class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center px-4 py-8 sm:px-6 lg:px-8"
  >
    <div class="w-full max-w-md space-y-8">
      <!-- Header -->
      <div class="text-center">
        <h1
          class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 mb-2"
        >
          Inicia sesión
        </h1>
        <p class="text-sm sm:text-base text-gray-600">
          Accede a tu cuenta para continuar
        </p>
      </div>

      <!-- Form Card -->
      <div
        class="bg-white rounded-xl shadow-lg p-6 sm:p-8 border border-gray-200"
      >
        <form id="signin-form" class="space-y-6">
          <div>
            <label
              for="email"
              class="block text-sm font-medium text-gray-700 mb-2"
            >
              Correo electrónico
            </label>
            <input
              type="email"
              name="email"
              id="email"
              placeholder="tucorreo@example.com"
              class="w-full px-3 py-3 sm:py-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 text-sm sm:text-base placeholder-gray-400"
              required
            />
          </div>

          <button
            type="submit"
            id="sign-in"
            class="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:hover:bg-gray-400 disabled:cursor-not-allowed text-white font-semibold py-3 sm:py-4 px-4 rounded-lg transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98] focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 text-sm sm:text-base"
          >
            Iniciar sesión
          </button>
        </form>

        <!-- Loading State -->
        <div id="loading-state" class="hidden text-center py-4">
          <div class="inline-flex items-center">
            <svg
              class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-600"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"></circle>
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
            <span class="text-sm text-gray-600">Enviando...</span>
          </div>
        </div>
      </div>

      <!-- Footer -->
      <div class="text-center text-xs sm:text-sm text-gray-500">
        <p>
          ¿Problemas para iniciar sesión?
          <a href="/help" class="text-blue-600 hover:text-blue-500 font-medium">
            Obtén ayuda
          </a>
        </p>
      </div>
    </div>

    <!-- Toast Notifications Container -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2">
      <!-- Toasts will be inserted here -->
    </div>
  </section>
</Layout>

<script>
  import { actions } from "astro:actions";

  const signInForm = document.querySelector("#signin-form") as HTMLFormElement;
  const formSubmitBtn = document.getElementById("sign-in") as HTMLButtonElement;
  const loadingState = document.getElementById("loading-state") as HTMLElement;
  const toastContainer = document.getElementById(
    "toast-container"
  ) as HTMLElement;

  // Toast notification function
  function showToast(
    message: string,
    type: "success" | "error" | "info" = "info"
  ) {
    const toastColors = {
      success: "bg-green-500",
      error: "bg-red-500",
      info: "bg-blue-500",
    };

    const toast = document.createElement("div");
    toast.className = `${toastColors[type]} text-white px-4 py-3 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full opacity-0 max-w-sm`;
    toast.innerHTML = `
      <div class="flex items-center justify-between">
        <span class="text-sm font-medium">${message}</span>
        <button class="ml-4 text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;

    toastContainer.appendChild(toast);

    // Animate in
    setTimeout(() => {
      toast.classList.remove("translate-x-full", "opacity-0");
    }, 100);

    // Auto remove after 5 seconds
    setTimeout(() => {
      toast.classList.add("translate-x-full", "opacity-0");
      setTimeout(() => toast.remove(), 300);
    }, 5000);
  }

  signInForm?.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Show loading state
    formSubmitBtn.style.display = "none";
    loadingState.classList.remove("hidden");

    try {
      const formData = new FormData(signInForm);
      const results = await actions.signIn(formData);

      if (!results.data?.success) {
        showToast(
          "No se pudo iniciar sesión. Por favor intenta de nuevo.",
          "error"
        );
      } else {
        showToast(
          "Revisa tu correo electrónico para completar el inicio de sesión.",
          "success"
        );
      }
    } catch (error) {
      console.error("Sign in error:", error);
      showToast("Algo salió mal. Por favor intenta de nuevo.", "error");
    } finally {
      // Hide loading state
      loadingState.classList.add("hidden");
      formSubmitBtn.style.display = "block";
    }
  });

  // Add form validation
  const emailInput = document.getElementById("email") as HTMLInputElement;

  emailInput?.addEventListener("input", () => {
    const isValid = emailInput.checkValidity();
    if (!isValid && emailInput.value.length > 0) {
      emailInput.classList.add(
        "border-red-500",
        "focus:ring-red-500",
        "focus:border-red-500"
      );
      emailInput.classList.remove(
        "border-gray-300",
        "focus:ring-blue-500",
        "focus:border-blue-500"
      );
    } else {
      emailInput.classList.remove(
        "border-red-500",
        "focus:ring-red-500",
        "focus:border-red-500"
      );
      emailInput.classList.add(
        "border-gray-300",
        "focus:ring-blue-500",
        "focus:border-blue-500"
      );
    }
  });
</script>
