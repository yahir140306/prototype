---
import Layout from "../layouts/Layout.astro";

// Esto se encarga de mostrar el formulario.
// La submission se mandará a "/api/agregar-cuarto" (API route).
---

<Layout>
  <div
    class="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-blue-50 py-8 px-4 sm:px-6 lg:px-8"
  >
    <div class="max-w-2xl mx-auto">
      <!-- Header -->
      <div class="text-center mb-8">
        <div
          class="mx-auto h-12 w-12 sm:h-16 sm:w-16 bg-indigo-600 rounded-full flex items-center justify-center mb-4"
        >
          <svg
            class="h-6 w-6 sm:h-8 sm:w-8 text-white"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
        </div>
        <h2
          class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 mb-2"
        >
          Agregar Nuevo Cuarto
        </h2>
        <p class="text-sm sm:text-base text-gray-600">
          Completa la información para publicar tu cuarto
        </p>
      </div>

      <!-- Form Card -->
      <div
        class="bg-white rounded-xl sm:rounded-2xl shadow-xl border border-gray-100 p-6 sm:p-8"
      >
        <form
          action="/api/agregar-cuarto"
          method="POST"
          enctype="multipart/form-data"
          id="room-form"
          class="space-y-6"
        >
          <!-- Basic Information Section -->
          <div class="space-y-6">
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                <svg
                  class="h-5 w-5 text-indigo-600 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                  ></path>
                </svg>
                Información Básica
              </h3>
            </div>

            <!-- Name Field -->
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700" for="name">
                Nombre del cuarto *
              </label>
              <div class="relative">
                <input
                  id="name"
                  name="name"
                  type="text"
                  required
                  placeholder="Ej: Cuarto luminoso cerca del centro"
                  class="w-full px-3 py-3 sm:py-4 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 text-sm sm:text-base placeholder-gray-400"
                />
                <div
                  class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
                >
                  <svg
                    class="h-5 w-5 text-gray-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
                    ></path>
                  </svg>
                </div>
              </div>
              <div id="name-error" class="text-red-500 text-xs hidden">
                El nombre es requerido
              </div>
            </div>

            <!-- Description Field -->
            <div class="space-y-2">
              <label
                class="block text-sm font-medium text-gray-700"
                for="descripcion"
              >
                Descripción *
              </label>
              <div class="relative">
                <textarea
                  id="descripcion"
                  name="descripcion"
                  required
                  rows="4"
                  placeholder="Describe las características, amenidades, ubicación y cualquier detalle relevante del cuarto..."
                  class="w-full px-3 py-3 sm:py-4 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 text-sm sm:text-base placeholder-gray-400 resize-vertical"
                ></textarea>
                <div
                  class="absolute top-3 left-0 pl-3 flex items-start pointer-events-none"
                >
                  <svg
                    class="h-5 w-5 text-gray-400 mt-1"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M4 6h16M4 12h16M4 18h7"></path>
                  </svg>
                </div>
              </div>
              <div class="flex justify-between items-center">
                <div id="descripcion-error" class="text-red-500 text-xs hidden">
                  La descripción es requerida
                </div>
                <div id="char-count" class="text-xs text-gray-500">
                  0 / 500 caracteres
                </div>
              </div>
            </div>

            <!-- Price Field -->
            <div class="space-y-2">
              <label
                class="block text-sm font-medium text-gray-700"
                for="precio"
              >
                Precio mensual *
              </label>
              <div class="relative">
                <input
                  id="precio"
                  name="precio"
                  type="number"
                  required
                  min="0"
                  step="0.01"
                  placeholder="5000.00"
                  class="w-full px-3 py-3 sm:py-4 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 text-sm sm:text-base placeholder-gray-400"
                />
                <div
                  class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
                >
                  <span class="text-gray-500 font-medium">$</span>
                </div>
              </div>
              <div id="precio-error" class="text-red-500 text-xs hidden">
                El precio es requerido y debe ser mayor a 0
              </div>
            </div>
          </div>

          <!-- Images Section -->
          <div class="space-y-6">
            <div class="border-b border-gray-200 pb-4">
              <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                <svg
                  class="h-5 w-5 text-indigo-600 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                  ></path>
                </svg>
                Imágenes del Cuarto
              </h3>
              <p class="text-sm text-gray-600 mt-1">
                Sube hasta 3 imágenes. La primera será la imagen principal.
              </p>
            </div>

            <!-- Image Upload Fields -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <!-- Image 1 (Required) -->
              <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">
                  Imagen principal *
                </label>
                <div class="relative">
                  <input
                    id="imagen_1"
                    name="imagen_1"
                    type="file"
                    accept="image/*"
                    required
                    class="hidden"
                  />
                  <div
                    id="upload-area-1"
                    class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-indigo-400 transition-colors cursor-pointer bg-gray-50 hover:bg-gray-100"
                  >
                    <svg
                      class="mx-auto h-12 w-12 text-gray-400"
                      stroke="currentColor"
                      fill="none"
                      viewBox="0 0 48 48"
                    >
                      <path
                        d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"></path>
                    </svg>
                    <p class="mt-2 text-sm text-gray-600">
                      <span class="font-medium text-indigo-600"
                        >Haz clic para subir</span
                      >
                      o arrastra y suelta
                    </p>
                    <p class="text-xs text-gray-500">PNG, JPG hasta 5MB</p>
                  </div>
                  <div id="preview-1" class="hidden mt-2">
                    <img class="w-full h-32 object-cover rounded-lg" />
                    <button
                      type="button"
                      class="mt-2 text-xs text-red-600 hover:text-red-800"
                      onclick="removeImage(1)"
                    >
                      Eliminar imagen
                    </button>
                  </div>
                </div>
              </div>

              <!-- Image 2 (Optional) -->
              <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">
                  Imagen adicional
                </label>
                <div class="relative">
                  <input
                    id="imagen_2"
                    name="imagen_2"
                    type="file"
                    accept="image/*"
                    class="hidden"
                  />
                  <div
                    id="upload-area-2"
                    class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-indigo-400 transition-colors cursor-pointer bg-gray-50 hover:bg-gray-100"
                  >
                    <svg
                      class="mx-auto h-12 w-12 text-gray-400"
                      stroke="currentColor"
                      fill="none"
                      viewBox="0 0 48 48"
                    >
                      <path
                        d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"></path>
                    </svg>
                    <p class="mt-2 text-sm text-gray-600">
                      <span class="font-medium text-indigo-600"
                        >Haz clic para subir</span
                      >
                    </p>
                    <p class="text-xs text-gray-500">PNG, JPG hasta 5MB</p>
                  </div>
                  <div id="preview-2" class="hidden mt-2">
                    <img class="w-full h-32 object-cover rounded-lg" />
                    <button
                      type="button"
                      class="mt-2 text-xs text-red-600 hover:text-red-800"
                      onclick="removeImage(2)"
                    >
                      Eliminar imagen
                    </button>
                  </div>
                </div>
              </div>

              <!-- Image 3 (Optional) -->
              <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">
                  Imagen adicional
                </label>
                <div class="relative">
                  <input
                    id="imagen_3"
                    name="imagen_3"
                    type="file"
                    accept="image/*"
                    class="hidden"
                  />
                  <div
                    id="upload-area-3"
                    class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-indigo-400 transition-colors cursor-pointer bg-gray-50 hover:bg-gray-100"
                  >
                    <svg
                      class="mx-auto h-12 w-12 text-gray-400"
                      stroke="currentColor"
                      fill="none"
                      viewBox="0 0 48 48"
                    >
                      <path
                        d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"></path>
                    </svg>
                    <p class="mt-2 text-sm text-gray-600">
                      <span class="font-medium text-indigo-600"
                        >Haz clic para subir</span
                      >
                    </p>
                    <p class="text-xs text-gray-500">PNG, JPG hasta 10MB</p>
                  </div>
                  <div id="preview-3" class="hidden mt-2">
                    <img class="w-full h-32 object-cover rounded-lg" />
                    <button
                      type="button"
                      class="mt-2 text-xs text-red-600 hover:text-red-800"
                      onclick="removeImage(3)"
                    >
                      Eliminar imagen
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-4 pt-6">
            <button
              type="button"
              onclick="history.back()"
              class="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-3 sm:py-4 px-6 rounded-lg transition-all duration-200 text-sm sm:text-base"
            >
              Cancelar
            </button>
            <button
              type="submit"
              id="submit-btn"
              class="flex-1 bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-medium py-3 sm:py-4 px-6 rounded-lg transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98] focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 text-sm sm:text-base flex items-center justify-center"
            >
              <span id="btn-text">Agregar Cuarto</span>
              <svg
                id="loading-spinner"
                class="hidden animate-spin ml-2 h-5 w-5 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Toast Container -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2">
      <!-- Toasts aparecerán aquí -->
    </div>
  </div>
</Layout>

<script>
  // Image upload functionality
  function setupImageUpload(imageNumber: number) {
    const input = document.getElementById(
      `imagen_${imageNumber}`
    ) as HTMLInputElement;
    const uploadArea = document.getElementById(`upload-area-${imageNumber}`);
    const preview = document.getElementById(`preview-${imageNumber}`);

    uploadArea?.addEventListener("click", () => input.click());

    // Drag and drop functionality
    uploadArea?.addEventListener("dragover", (e) => {
      e.preventDefault();
      uploadArea.classList.add("border-indigo-500", "bg-indigo-50");
    });

    uploadArea?.addEventListener("dragleave", () => {
      uploadArea.classList.remove("border-indigo-500", "bg-indigo-50");
    });

    uploadArea?.addEventListener("drop", (e) => {
      e.preventDefault();
      uploadArea.classList.remove("border-indigo-500", "bg-indigo-50");

      const files = e.dataTransfer?.files;
      if (files && files.length > 0) {
        input.files = files;
        handleImageSelect(imageNumber, files[0]);
      }
    });

    input?.addEventListener("change", (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        handleImageSelect(imageNumber, file);
      }
    });
  }

  async function handleImageSelect(imageNumber: number, file: File) {
    // Validate file size (5MB max for mobile compatibility)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      showToast("La imagen es muy grande. Máximo 5MB.", "error");
      return;
    }

    // Validate file type
    if (!file.type.startsWith("image/")) {
      showToast("Por favor selecciona un archivo de imagen válido.", "error");
      return;
    }

    // Compress image if necessary for mobile
    const compressedFile = await compressImageIfNeeded(file, maxSize);

    const uploadArea = document.getElementById(`upload-area-${imageNumber}`);
    const preview = document.getElementById(`preview-${imageNumber}`);
    const img = preview?.querySelector("img");

    if (img) {
      const reader = new FileReader();
      reader.onload = (e) => {
        img.src = e.target?.result as string;
        uploadArea?.classList.add("hidden");
        preview?.classList.remove("hidden");
      };
      reader.readAsDataURL(compressedFile);
    }
  }

  // Image compression function for mobile compatibility
  async function compressImageIfNeeded(
    file: File,
    maxSize: number
  ): Promise<File> {
    if (file.size <= maxSize) {
      return file;
    }

    return new Promise((resolve) => {
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      const img = new Image();

      img.onload = () => {
        // Calculate new dimensions
        const maxWidth = 1920;
        const maxHeight = 1080;
        let { width, height } = img;

        if (width > height) {
          if (width > maxWidth) {
            height = (height * maxWidth) / width;
            width = maxWidth;
          }
        } else {
          if (height > maxHeight) {
            width = (width * maxHeight) / height;
            height = maxHeight;
          }
        }

        canvas.width = width;
        canvas.height = height;

        // Draw and compress
        ctx?.drawImage(img, 0, 0, width, height);

        canvas.toBlob(
          (blob) => {
            if (blob) {
              const compressedFile = new File([blob], file.name, {
                type: "image/jpeg",
                lastModified: Date.now(),
              });
              resolve(compressedFile);
            } else {
              resolve(file);
            }
          },
          "image/jpeg",
          0.8 // Compression quality
        );
      };

      img.src = URL.createObjectURL(file);
    });
  }

  // Remove image function
  function removeImage(imageNumber: number) {
    const input = document.getElementById(
      `imagen_${imageNumber}`
    ) as HTMLInputElement;
    const uploadArea = document.getElementById(`upload-area-${imageNumber}`);
    const preview = document.getElementById(`preview-${imageNumber}`);

    input.value = "";
    uploadArea?.classList.remove("hidden");
    preview?.classList.add("hidden");
  }

  // Initialize image uploads
  [1, 2, 3].forEach((num) => setupImageUpload(num));

  // Character counter for description
  const descripcionInput = document.getElementById(
    "descripcion"
  ) as HTMLTextAreaElement;
  const charCount = document.getElementById("char-count");

  descripcionInput?.addEventListener("input", () => {
    const length = descripcionInput.value.length;
    const maxLength = 500;

    if (charCount) {
      charCount.textContent = `${length} / ${maxLength} caracteres`;

      if (length > maxLength) {
        charCount.classList.add("text-red-500");
        charCount.classList.remove("text-gray-500");
      } else {
        charCount.classList.remove("text-red-500");
        charCount.classList.add("text-gray-500");
      }
    }
  });

  // Form validation
  const form = document.getElementById("room-form") as HTMLFormElement;
  const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
  const btnText = document.getElementById("btn-text");
  const loadingSpinner = document.getElementById("loading-spinner");

  // Toast notification function
  function showToast(
    message: string,
    type: "success" | "error" | "info" = "info"
  ) {
    const toastColors = {
      success: "bg-green-500",
      error: "bg-red-500",
      info: "bg-blue-500",
    };

    const toast = document.createElement("div");
    toast.className = `${toastColors[type]} text-white px-4 py-3 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full opacity-0 max-w-sm`;
    toast.innerHTML = `
      <div class="flex items-center justify-between">
        <span class="text-sm font-medium">${message}</span>
        <button class="ml-4 text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;

    const container = document.getElementById("toast-container");
    container?.appendChild(toast);

    setTimeout(() => {
      toast.classList.remove("translate-x-full", "opacity-0");
    }, 100);

    setTimeout(() => {
      toast.classList.add("translate-x-full", "opacity-0");
      setTimeout(() => toast.remove(), 300);
    }, 5000);
  }

  // Form submission with mobile optimizations
  form?.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Validate required fields
    let hasErrors = false;

    // Validate name
    const nameInput = document.getElementById("name") as HTMLInputElement;
    const nameError = document.getElementById("name-error");
    if (!nameInput.value.trim()) {
      nameError?.classList.remove("hidden");
      hasErrors = true;
    } else {
      nameError?.classList.add("hidden");
    }

    // Validate description
    const descripcionError = document.getElementById("descripcion-error");
    if (!descripcionInput.value.trim()) {
      descripcionError?.classList.remove("hidden");
      hasErrors = true;
    } else {
      descripcionError?.classList.add("hidden");
    }

    // Validate price
    const precioInput = document.getElementById("precio") as HTMLInputElement;
    const precioError = document.getElementById("precio-error");
    if (!precioInput.value || parseFloat(precioInput.value) <= 0) {
      precioError?.classList.remove("hidden");
      hasErrors = true;
    } else {
      precioError?.classList.add("hidden");
    }

    if (hasErrors) {
      showToast("Por favor corrige los errores antes de continuar.", "error");
      return;
    }

    // Show loading state
    submitBtn.disabled = true;
    btnText!.textContent = "Agregando...";
    loadingSpinner?.classList.remove("hidden");

    try {
      const formData = new FormData(form);

      // Add timeout and retry logic for mobile
      const uploadWithRetry = async (retries = 3): Promise<Response> => {
        for (let i = 0; i < retries; i++) {
          try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 second timeout

            const response = await fetch("/api/agregar-cuarto", {
              method: "POST",
              body: formData,
              signal: controller.signal,
              headers: {
                // Add headers for mobile compatibility
                "Cache-Control": "no-cache",
              },
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
              throw new Error(
                `HTTP ${response.status}: ${response.statusText}`
              );
            }

            return response;
          } catch (error) {
            console.warn(`Intento ${i + 1} falló:`, error);

            if (i === retries - 1) {
              throw error;
            }

            // Wait before retry (exponential backoff)
            await new Promise((resolve) =>
              setTimeout(resolve, Math.pow(2, i) * 1000)
            );
          }
        }
        throw new Error("All retries failed");
      };

      const response = await uploadWithRetry();
      const result = await response.json();

      if (result.success) {
        showToast("¡Cuarto agregado exitosamente!", "success");
        setTimeout(() => {
          window.location.href = "/";
        }, 2000);
      } else {
        showToast(
          result.error || "Error al agregar el cuarto. Intenta de nuevo.",
          "error"
        );
      }
    } catch (error) {
      console.error("Error:", error);

      // More specific error messages for mobile
      let errorMessage = "Error de conexión. Intenta de nuevo.";

      if (error instanceof Error) {
        if (error.name === "AbortError") {
          errorMessage =
            "La subida tardó demasiado. Verifica tu conexión e intenta de nuevo.";
        } else if (error.message.includes("Failed to fetch")) {
          errorMessage =
            "Sin conexión a internet. Verifica tu conexión e intenta de nuevo.";
        } else if (error.message.includes("413")) {
          errorMessage =
            "Las imágenes son muy grandes. Reduce el tamaño e intenta de nuevo.";
        }
      }

      showToast(errorMessage, "error");
    } finally {
      // Reset button state
      submitBtn.disabled = false;
      btnText!.textContent = "Agregar Cuarto";
      loadingSpinner?.classList.add("hidden");
    }
  });
</script>
