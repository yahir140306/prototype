---
import Layout from "../../layouts/Layout.astro";
import { createClient } from "../../lib/supabase";
import { decodeHexUrl } from "../../utils/urlDecoder.js";

const { id } = Astro.params;

const supabase = createClient({
  request: Astro.request,
  cookies: Astro.cookies,
});

// ‚úÖ CORREGIDO: Consulta para un solo cuarto
const { data: cuarto, error } = await supabase
  .from("cuartos")
  .select(
    `
    id,
    titulo,
    descripcion,
    precio,
    celular,
    caracteristicas,
    ubicacion,
    imagen_1,
    imagen_2,
    imagen_3,
    created_at,
    user_id,
    activo
  `
  )
  .eq("id", id)
  .eq("activo", true)
  .single(); // ‚úÖ CORREGIDO: .single() para obtener un solo registro

if (error || !cuarto) {
  return Astro.redirect("/404");
}

const imagenes = [cuarto.imagen_1, cuarto.imagen_2, cuarto.imagen_3]
  .map(decodeHexUrl)
  .filter(Boolean);

if (imagenes.length === 0) {
  imagenes.push("/Images/default.jpeg");
}

// ‚úÖ Funci√≥n para generar enlace de WhatsApp (servidor)
function generarEnlaceWhatsApp(celular, titulo, precio) {
  if (!celular) return "#";

  const numeroLimpio = celular.replace(/[\s\-\(\)]/g, "");
  const mensaje = `Hola! Me interesa el cuarto "${titulo}" con precio de $${precio}. ¬øPodr√≠as darme m√°s informaci√≥n?`;
  const mensajeCodificado = encodeURIComponent(mensaje);

  return `https://wa.me/${numeroLimpio}?text=${mensajeCodificado}`;
}
---

<Layout>
  <html lang="es">
    <head>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>{cuarto.titulo}</title>
      <!-- ‚úÖ CORREGIDO: cuarto.titulo en lugar de cuarto.name -->
      <script src="https://cdn.tailwindcss.com"></script>
      <script
        src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"
      ></script>
      <style>
        .no-scrollbar::-webkit-scrollbar {
          display: none;
        }
        .no-scrollbar {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }

        .download-card {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          font-family:
            "Inter",
            -apple-system,
            BlinkMacSystemFont,
            sans-serif;
        }

        .download-hidden {
          position: absolute;
          top: -9999px;
          left: -9999px;
          width: 800px;
          height: 600px;
        }

        .line-clamp-4 {
          display: -webkit-box;
          -webkit-line-clamp: 4;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }

        .star-btn {
          cursor: pointer;
          user-select: none;
        }

        .star-btn:hover,
        .star-btn.active {
          color: #fcd34d !important;
        }

        .comment-card {
          transition: all 0.2s ease;
        }

        .comment-card:hover {
          transform: translateY(-1px);
          box-shadow:
            0 4px 6px -1px rgba(0, 0, 0, 0.1),
            0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        .btn-whatsapp {
          background-color: #25d366;
          color: white;
          padding: 12px 20px;
          text-decoration: none;
          border-radius: 8px;
          display: inline-flex;
          align-items: center;
          gap: 8px;
          font-weight: bold;
          transition: background-color 0.3s;
        }

        .btn-whatsapp:hover {
          background-color: #20ba5a;
          color: white;
          text-decoration: none;
        }
      </style>
    </head>
    <body class="bg-gray-100 text-gray-800 min-h-screen">
      <main class="max-w-4xl mx-auto px-4 py-8 space-y-6">
        <!-- Bot√≥n Volver -->
        <a href="/" class="text-blue-600 hover:underline">‚Üê Volver</a>

        <!-- T√≠tulo y precio -->
        <h1 class="text-3xl font-bold">{cuarto.titulo}</h1>
        <p class="text-xl text-blue-600 font-semibold">
          ${cuarto.precio} / mes
        </p>

        <!-- Carrusel -->
        <div
          id="carousel"
          class="overflow-x-auto no-scrollbar flex snap-x snap-mandatory scroll-smooth rounded-lg"
        >
          {
            imagenes.map((url, i) => (
              <img
                src={url}
                alt={`Imagen ${i + 1}`}
                class="snap-center w-full h-[500px] object-cover flex-shrink-0 rounded-lg shadow"
                style="min-width: 100%"
              />
            ))
          }
        </div>

        <!-- Descripci√≥n -->
        <section>
          <h2 class="text-xl font-semibold mb-2">Descripci√≥n</h2>
          <p class="bg-white p-4 rounded-lg shadow">{cuarto.descripcion}</p>
        </section>

        <!-- Info -->
        <section class="grid md:grid-cols-2 gap-4">
          <div class="bg-white p-4 rounded-lg shadow">
            <h3 class="font-semibold mb-2">Caracter√≠sticas</h3>
            <p class="text-gray-700">
              {cuarto.caracteristicas || "No especificadas"}
            </p>
          </div>
          <div class="bg-white p-4 rounded-lg shadow">
            <h3 class="font-semibold mb-2">Ubicaci√≥n</h3>
            <p class="text-gray-700">{cuarto.ubicacion || "No especificada"}</p>
          </div>
        </section>

        <!-- Secci√≥n de Comentarios -->
        <section class="space-y-6">
          <div class="bg-white p-6 rounded-lg shadow">
            <div class="flex items-center justify-between mb-4">
              <h2 class="text-2xl font-bold text-gray-900">
                Comentarios y Calificaciones
              </h2>
              <div id="rating-summary" class="text-right">
                <div class="flex items-center justify-end space-x-2">
                  <div class="flex text-yellow-400" id="average-stars"></div>
                  <span
                    id="average-rating"
                    class="text-lg font-semibold text-gray-700">0.0</span
                  >
                </div>
                <p class="text-sm text-gray-500">
                  <span id="total-reviews">0</span> comentarios
                </p>
              </div>
            </div>

            <!-- Formulario para agregar comentario -->
            <div class="border-t pt-4" id="comment-form-section">
              <h3 class="text-lg font-semibold mb-4">Deja tu comentario</h3>
              <form id="comment-form" class="space-y-4">
                <input type="hidden" name="cuarto_id" value={cuarto.id} />

                <!-- Calificaci√≥n con estrellas -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2"
                    >Calificaci√≥n *</label
                  >
                  <div class="flex items-center space-x-1" id="star-rating">
                    {
                      [1, 2, 3, 4, 5].map((star) => (
                        <button
                          type="button"
                          class="star-btn text-3xl text-gray-300 hover:text-yellow-400 transition-colors focus:outline-none"
                          data-rating={star}
                        >
                          ‚òÖ
                        </button>
                      ))
                    }
                  </div>
                  <input
                    type="hidden"
                    name="calificacion"
                    id="rating-input"
                    required
                  />
                  <p class="text-xs text-gray-500 mt-1">
                    Haz clic en las estrellas para calificar
                  </p>
                </div>

                <!-- Comentario -->
                <div>
                  <label
                    for="comentario"
                    class="block text-sm font-medium text-gray-700 mb-2"
                  >
                    Comentario *
                  </label>
                  <textarea
                    id="comentario"
                    name="comentario"
                    rows="4"
                    required
                    minlength="10"
                    maxlength="500"
                    placeholder="Comparte tu experiencia sobre este cuarto..."
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  ></textarea>
                  <p class="text-xs text-gray-500 mt-1">
                    M√≠nimo 10 caracteres, m√°ximo 500
                  </p>
                </div>

                <!-- Bot√≥n enviar -->
                <button
                  type="submit"
                  id="submit-comment"
                  class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors font-medium"
                >
                  Publicar Comentario
                </button>
              </form>
            </div>
          </div>

          <!-- Lista de Comentarios -->
          <div id="comments-list" class="space-y-4"></div>
        </section>

        <!-- Botones de contacto y descarga -->
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a
            href={generarEnlaceWhatsApp(
              cuarto.celular,
              cuarto.titulo,
              cuarto.precio
            )}
            target="_blank"
            class="btn-whatsapp"
          >
            üì± Contactar al Propietario
          </a>
          <button
            id="download-btn"
            class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center gap-2"
          >
            <svg
              class="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 10v6m0 0l-4-4m4 4l4-4m-6 2a8 8 0 100-16 8 8 0 000 16z"
              ></path>
            </svg>
            Descargar Tarjeta
          </button>
        </div>
      </main>

      <!-- Tarjeta oculta para descarga -->
      <div id="download-card" class="download-hidden">
        <div
          class="download-card w-full h-full text-white p-8 flex flex-col justify-between"
        >
          <!-- Header -->
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-3">
              <div
                class="w-10 h-10 bg-white bg-opacity-20 rounded-full flex items-center justify-center"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                  <path
                    d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"
                  ></path>
                </svg>
              </div>
              <div>
                <h1 class="text-2xl font-bold">RANTU</h1>
                <p class="text-sm opacity-80">Tu pr√≥ximo hogar</p>
              </div>
            </div>
            <div class="text-right">
              <div class="text-3xl font-bold">
                ${cuarto.precio.toLocaleString()}
              </div>
              <div class="text-sm opacity-80">por mes</div>
            </div>
          </div>

          <!-- Contenido principal -->
          <div class="flex-1 flex items-center justify-between py-8">
            <div class="w-80 h-60 rounded-xl overflow-hidden shadow-2xl">
              <img
                src={imagenes[0]}
                alt={cuarto.titulo}
                class="w-full h-full object-cover"
                crossorigin="anonymous"
              />
            </div>

            <div class="flex-1 pl-8">
              <h2 class="text-4xl font-bold mb-4 leading-tight">
                {cuarto.titulo}
              </h2>
              <p class="text-lg opacity-90 mb-6 leading-relaxed line-clamp-4">
                {cuarto.descripcion}
              </p>

              <div class="space-y-2">
                <div class="flex items-center space-x-2">
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fill-rule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                      clip-rule="evenodd"></path>
                  </svg>
                  <span
                    >{
                      cuarto.caracteristicas
                        ? cuarto.caracteristicas.split(",")[0]
                        : "Completamente amueblado"
                    }</span
                  >
                </div>
                <div class="flex items-center space-x-2">
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fill-rule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                      clip-rule="evenodd"></path>
                  </svg>
                  <span
                    >{
                      cuarto.ubicacion
                        ? cuarto.ubicacion.split(",")[0]
                        : "Ubicaci√≥n c√©ntrica"
                    }</span
                  >
                </div>
                <div class="flex items-center space-x-2">
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fill-rule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                      clip-rule="evenodd"></path>
                  </svg>
                  <span>Disponible inmediatamente</span>
                </div>
              </div>
            </div>
          </div>

          <!-- Footer -->
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <div class="text-sm opacity-80">
                üè† Encuentra m√°s opciones en R A N T U
              </div>
            </div>
            <div class="text-sm opacity-80">
              Generado el {new Date().toLocaleDateString("es-ES")}
            </div>
          </div>
        </div>
      </div>

      <!-- Scripts -->
      <script is:inline define:vars={{ cuarto }}>
        let selectedRating = 0;
        const cuartoId = cuarto.id;

        console.log("üè† ID del cuarto:", cuartoId);

        // Funci√≥n para renderizar estrellas
        function renderStars(rating, className = "text-yellow-400") {
          let stars = "";
          for (let i = 1; i <= 5; i++) {
            if (i <= rating) {
              stars += `<span class="${className}">‚òÖ</span>`;
            } else if (i - 0.5 <= rating) {
              stars += `<span class="${className}">‚òÜ</span>`;
            } else {
              stars += `<span class="text-gray-300">‚òÜ</span>`;
            }
          }
          return stars;
        }

        // Manejar clicks en las estrellas
        document.querySelectorAll(".star-btn").forEach((btn) => {
          btn.addEventListener("click", function () {
            selectedRating = parseInt(this.dataset.rating);
            document.getElementById("rating-input").value = selectedRating;

            document.querySelectorAll(".star-btn").forEach((star, index) => {
              if (index < selectedRating) {
                star.classList.add("active");
                star.style.color = "#FCD34D";
              } else {
                star.classList.remove("active");
                star.style.color = "#D1D5DB";
              }
            });
          });
        });

        // Cargar comentarios
        async function cargarComentarios() {
          try {
            console.log("üîç Cargando comentarios para cuarto ID:", cuartoId);
            const response = await fetch(
              `/api/cuartos/${cuartoId}/comentarios`
            );

            if (!response.ok) {
              const errorData = await response.json();
              console.error("‚ùå Error cargando comentarios:", errorData);
              return;
            }

            const data = await response.json();
            console.log("‚úÖ Comentarios cargados:", data);

            if (data.success) {
              mostrarEstadisticas(data.estadisticas);
              mostrarComentarios(data.comentarios);
            } else {
              console.error("Error cargando comentarios:", data.error);
            }
          } catch (error) {
            console.error("üí• Error en cargarComentarios:", error);
          }
        }

        // Mostrar estad√≠sticas
        function mostrarEstadisticas(estadisticas) {
          document.getElementById("average-rating").textContent =
            estadisticas.promedio.toFixed(1);
          document.getElementById("total-reviews").textContent =
            estadisticas.total;
          document.getElementById("average-stars").innerHTML = renderStars(
            estadisticas.promedio
          );
        }

        // Mostrar comentarios
        function mostrarComentarios(comentarios) {
          const container = document.getElementById("comments-list");

          if (comentarios.length === 0) {
            container.innerHTML = `
              <div class="bg-gray-50 rounded-lg p-8 text-center">
                <div class="text-gray-400 text-4xl mb-2">üí¨</div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No hay comentarios a√∫n</h3>
                <p class="text-gray-500">¬°S√© el primero en comentar sobre este cuarto!</p>
              </div>
            `;
            return;
          }

          container.innerHTML = comentarios
            .map(
              (comentario) => `
            <div class="comment-card bg-white p-6 rounded-lg shadow border">
              <div class="flex items-start justify-between mb-3">
                <div class="flex items-center space-x-3">
                  <div class="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center text-white font-medium">
                    ${comentario.usuario_inicial || "U"}
                  </div>
                  <div>
                    <h4 class="font-medium text-gray-900">
                      ${comentario.usuario_email ? comentario.usuario_email.split("@")[0] : "Usuario"}
                    </h4>
                    <div class="flex items-center space-x-2">
                      <div class="flex">
                        ${renderStars(comentario.calificacion)}
                      </div>
                      <span class="text-sm text-gray-500">
                        ${comentario.fecha_formateada || new Date(comentario.created_at).toLocaleDateString("es-ES")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              <p class="text-gray-700 leading-relaxed">
                ${comentario.comentario}
              </p>
            </div>
          `
            )
            .join("");
        }

        // Manejar env√≠o del formulario
        document
          .getElementById("comment-form")
          .addEventListener("submit", async function (e) {
            e.preventDefault();

            const submitBtn = document.getElementById("submit-comment");
            const originalText = submitBtn.textContent;

            if (selectedRating === 0) {
              alert("Por favor selecciona una calificaci√≥n");
              return;
            }

            try {
              submitBtn.textContent = "Publicando...";
              submitBtn.disabled = true;

              const formData = new FormData(this);
              console.log("üìù Enviando comentario para cuarto:", cuartoId);

              const response = await fetch(
                `/api/cuartos/${cuartoId}/comentarios`,
                {
                  method: "POST",
                  body: formData,
                }
              );

              const result = await response.json();
              console.log("üì® Respuesta del servidor:", result);

              if (result.success) {
                alert("¬°Comentario publicado exitosamente!");

                // Limpiar formulario
                document.getElementById("comentario").value = "";
                selectedRating = 0;
                document.getElementById("rating-input").value = "";
                document.querySelectorAll(".star-btn").forEach((star) => {
                  star.classList.remove("active");
                  star.style.color = "#D1D5DB";
                });

                // Recargar comentarios
                cargarComentarios();
              } else {
                alert("Error: " + result.error);
              }
            } catch (error) {
              console.error("üí• Error:", error);
              alert("Error publicando comentario");
            } finally {
              submitBtn.textContent = originalText;
              submitBtn.disabled = false;
            }
          });

        // Funci√≥n para descargar tarjeta
        async function descargarTarjeta() {
          const downloadBtn = document.getElementById("download-btn");
          const originalText = downloadBtn.innerHTML;

          try {
            downloadBtn.innerHTML = `
              <svg class="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Generando...
            `;
            downloadBtn.disabled = true;

            const card = document.getElementById("download-card");

            const canvas = await html2canvas(card, {
              width: 800,
              height: 600,
              scale: 2,
              useCORS: true,
              allowTaint: true,
              backgroundColor: null,
              logging: false,
              onclone: function (clonedDoc) {
                const clonedCard = clonedDoc.getElementById("download-card");
                clonedCard.style.position = "relative";
                clonedCard.style.top = "0";
                clonedCard.style.left = "0";
              },
            });

            const link = document.createElement("a");
            link.download = `cuarto-${encodeURIComponent(cuarto.titulo)}-${Date.now()}.png`;
            link.href = canvas.toDataURL("image/png", 1.0);

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            alert("¬°Tarjeta descargada exitosamente!");
          } catch (error) {
            console.error("Error generando tarjeta:", error);
            alert("Error al generar la tarjeta. Int√©ntalo de nuevo.");
          } finally {
            downloadBtn.innerHTML = originalText;
            downloadBtn.disabled = false;
          }
        }

        // Event listeners
        document.addEventListener("DOMContentLoaded", function () {
          document
            .getElementById("download-btn")
            .addEventListener("click", descargarTarjeta);
          cargarComentarios();
        });
      </script>
    </body>
  </html>
</Layout>
